" VIM Configuration
" Author : iamhsa

" Vim-plug config
" ======================================================
" -- Install vim-plug
" Install vim-plug if not found
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Specify a directory for plugins
" - For Neovim: stdpath('data') . '/plugged'
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

  Plug 'chrisbra/csv.vim'
  Plug 'junegunn/goyo.vim'
  Plug 'morhetz/gruvbox'
  Plug 'martinda/Jenkinsfile-vim-syntax'
  Plug 'junegunn/limelight.vim'
  Plug 'preservim/nerdtree' |
            \ Plug 'Xuyuanp/nerdtree-git-plugin'
  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'
  Plug 'ryanoasis/vim-devicons'
  Plug 'jvirtanen/vim-hcl'
  Plug 'hashivim/vim-terraform'
  Plug 'cespare/vim-toml'
  Plug 'Yggdroot/indentLine'
  Plug 'pedrohdz/vim-yaml-folds'
  Plug 'dense-analysis/ale'
  Plug 'tpope/vim-markdown'
  Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}
  Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Initialize plugin system
call plug#end()

" Config Section
" ======================================================
set encoding=utf-8
set nobackup                " Some servers have issues with backup files, see #649.
set nowritebackup
set nocompatible            " disable compatibility to old-time vi
set showmatch               " show matching brackets.
set ignorecase              " case insensitive matching
set hlsearch                " highlight search results
set tabstop=2               " number of columns occupied by a tab character
set softtabstop=2           " see multiple spaces as tabstops so <BS> does the right thing
set expandtab               " converts tabs to white space
set shiftwidth=2            " width for autoindents
set autoindent              " indent a new line the same amount as the line just typed
set number                  " add line numbers
set t_Co=256
set laststatus=2
set term=xterm-256color
set termencoding=utf-8
set ffs=unix,mac,dos
set splitbelow
filetype plugin indent on   " allows auto-indenting depending on file type
" if (has("termguicolors"))
"   set termguicolors
" endif
set background=dark
set notermguicolors
highlight Search ctermfg=0
" colorscheme default
colorscheme gruvbox
if &diff
  colorscheme gruvbox
endif
set foldlevelstart=20

" Ale config
" ======================================================
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_sign_error = '✘'
let g:ale_sign_warning = '⚠'
let g:ale_lint_on_text_changed = 'never'

" Limelight config
" =====================================================
let g:limelight_conceal_ctermfg=244

" Syntax Section
" ======================================================
syntax on                   " syntax highlighting
autocmd BufNewFile,BufRead *.yaml.dec set syntax=yaml
autocmd FileType yaml,yml setlocal ts=2 sts=2 sw=2 expandtab
autocmd BufNewFile,BufRead *.zsh.tmpl set syntax=zsh

" Desactiver les touches directionnelles
" ======================================================
"map <up> <nop>
"map <down> <nop>
"map <left> <nop>
"map <right> <nop>
"imap <up> <nop>
"imap <down> <nop>
"imap <left> <nop>
"imap <right> <nop>

" Airline Config
" ======================================================
let g:airline_powerline_fonts = 1
let g:airline_theme='lucius'
let g:airline#extensions#tabline#enabled = 1


" NerdTree Config
" ======================================================
let g:NERDTreeShowHidden = 1
let g:NERDTreeMinimalUI = 1
"let g:NERDTreeIgnore = []
"let g:NERDTreeStatusline = ''
autocmd BufWinEnter * NERDTreeMirror
" Automaticaly close nvim if NERDTree is only thing left open
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" Toggle
nnoremap <silent> <C-b> :NERDTreeToggle<CR>

" Terminal config
" ======================================================
" autocmd vimenter * below terminal ++rows=6

" Terraform config
" ======================================================
let g:terraform_align=2
let g:terraform_fmt_on_save=1

" Coc config
" ======================================================
" Use tab for trigger completion with characters ahead and navigate.
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice.
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" .............................................................................
" iamcco/markdown-preview.nvim
" .............................................................................
let g:mkdp_auto_close=0
let g:mkdp_refresh_slow=1

" Commands Section
" ======================================================
" Mapping to force writing with sudo
cmap w!! w !sudo tee >/dev/null %

"Remove all trailing whitespace by pressing F5
nnoremap <F5> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar><CR>
