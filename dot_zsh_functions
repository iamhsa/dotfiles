## zsh functions
# ===============================================================
function edit-command-line-inplace() {
  if [[ $CONTEXT != start ]]; then
    if (( ! ${+widgets[edit-command-line]} )); then
      autoload -Uz edit-command-line
      zle -N edit-command-line
    fi
    zle edit-command-line
    return
  fi
  () {
    emulate -L zsh -o nomultibyte
    local editor=("${(@Q)${(z)${VISUAL:-${EDITOR:-vi}}}}") 
    case $editor in
      (*vim*)
        "${(@)editor}" -c "normal! $(($#LBUFFER + 1))go" -- $1
      ;;
      (*emacs*)
        local lines=("${(@f)LBUFFER}") 
        "${(@)editor}" +${#lines}:$((${#lines[-1]} + 1)) $1
      ;;
      (*)
        "${(@)editor}" $1
      ;;
    esac
    BUFFER=$(<$1)
    CURSOR=$#BUFFER
  } =(<<<"$BUFFER") </dev/tty
}

## p10k functions
## ==============================================================
function toggle-time-segment() {
  (( ${+functions[p10k]} )) || return
  p10k display '*/time'=hide,show;
}

## asdf functions
## ==============================================================
function updAsdfTools() {
  for t in "${(@f)"$(<~/.tool-versions)"}"; do
    pkg="$(echo "${t}" | cut -d ' ' -f1)"
    if [[ "${t}" == *"system"* ]]; then
      echo "${pkg} is set as system package (nothing to do)"
    else
      asdf install ${pkg} latest && asdf global ${pkg} latest
    fi
  done
}

## aws functions
## ==============================================================
#functions assume-aws-role () {
#  eval $(aws sts assume-role \
#    --role-arn ${1} \
#    --role-session-name=test \
#    --query 'join(``, [`export `, `AWS_ACCESS_KEY_ID=`, 
#      Credentials.AccessKeyId, ` ; export `, `AWS_SECRET_ACCESS_KEY=`,
#      Credentials.SecretAccessKey, `; export `, `AWS_SESSION_TOKEN=`,
#      Credentials.SessionToken])' \
#    --output text)
#}
