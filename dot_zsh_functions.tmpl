## zsh functions
# ===============================================================
function edit-command-line-inplace() {
  if [[ $CONTEXT != start ]]; then
    if (( ! ${+widgets[edit-command-line]} )); then
      autoload -Uz edit-command-line
      zle -N edit-command-line
    fi
    zle edit-command-line
    return
  fi
  () {
    emulate -L zsh -o nomultibyte
    local editor=("${(@Q)${(z)${VISUAL:-${EDITOR:-vi}}}}")
    case $editor in
      (*vim*)
        "${(@)editor}" -c "normal! $(($#LBUFFER + 1))go" -- $1
      ;;
      (*emacs*)
        local lines=("${(@f)LBUFFER}")
        "${(@)editor}" +${#lines}:$((${#lines[-1]} + 1)) $1
      ;;
      (*)
        "${(@)editor}" $1
      ;;
    esac
    BUFFER=$(<$1)
    CURSOR=$#BUFFER
  } =(<<<"$BUFFER") </dev/tty
}

function fix-zsh-history() {
  mv ~/.zsh_history ~/.zsh_history_bad
  strings ~/.zsh_history_bad > ~/.zsh_history
  fc -R ~/.zsh_history
  rm ~/.zsh_history_bad
}

function getWifiSsid() {
  netsh.exe wlan show interfaces | grep "Profile.*:" | cut -d : -f2 | sed 's/ //g'
}
{{- if .islastpasspresent }}
## enterprise proxy functions
## ==============================================================
function add-proxy(){
  export  SHELLPROXY_URL="{{ (index (lastpassRaw "proxy value") 0).note }}"
}
{{- end }}

## p10k functions
## ==============================================================
function toggle-kubecontext-segment() {
  (( ${+functions[p10k]} )) || return
  p10k display '*/kubecontext'=show,hide;
}

function toggle-time-segment() {
  (( ${+functions[p10k]} )) || return
  p10k display '*/time'=hide,show;
}

function toggle-wifi-segment() {
  (( ${+functions[p10k]} )) || return
  p10k display '*/wifi'=hide,show;
}

function toggle-lastpass-segment() {
  (( ${+functions[p10k]} )) || return
  p10k display '*/my_lpass'=hide,show;
}

function toggle-transient-prompt() {
  if [[ $POWERLEVEL9K_TRANSIENT_PROMPT != off ]]; then
    POWERLEVEL9K_TRANSIENT_PROMPT=off
  else
    POWERLEVEL9K_TRANSIENT_PROMPT=always
  fi
  p10k reload
}

zle -N toggle-lastpass-segment
bindkey '^P' toggle-lastpass-segment
zle -N toggle-time-segment
bindkey '^T' toggle-time-segment
zle -N toggle-wifi-segment
bindkey '^N' toggle-wifi-segment
zle -N toggle-kubecontext-segment
bindkey '^K' toggle-kubecontext-segment

## aws functions
## ==============================================================
function aws-ecr-repo-empty-list () {
  for repo in $(aws ecr describe-repositories | jq -cr '.repositories | .[].repositoryName' | sed 's/\r//g'); do
    IMAGES=$(aws ecr list-images --repository-name ${repo} | grep imageDigest)
    #echo $i -- $repo
    if [[ "$?" -eq "1" ]]; then
      echo "${repo}: empty"
      if [[ "$1" == "-d" ]]; then
        aws ecr delete-repository --repository-name ${repo}
      fi
    fi
  done
}

{{- if .islastpasspresent }}
function aws-start-inf1 () {
  inst-id="$(aws ec2 describe-instances --filters "Name=tag:Name,Values={{ (index (lastpassRaw "inf1_tag_name") 0).note }}" --query 'Reservations[].Instances[].InstanceId' --output text)"
  aws ec2 start-instances --instance-ids $inst-id
}

function aws-clean-ecr-untagged-images() {
  aws ecr  describe-repositories \
    | jq --raw-output '.repositories[] | select(.repositoryName | startswith("docker-hub")) | .repositoryName' \
    | while read repo; do
      imageIds=$(aws ecr list-images --repository-name $repo --filter tagStatus=UNTAGGED --query 'imageIds[*]' --output json  | jq -r '[.[].imageDigest] | map("imageDigest="+.) | join (" ")');
      if [[ "$imageIds" == "" ]]; then continue; fi
      aws ecr batch-delete-image --repository-name $repo --image-ids $imageIds;
    done
}

## brew functions
## ==============================================================
function brew_find_pkg {
    file_to_search="$@"
    for package in $(brew list); do
        brew ls $package | grep -E -q "/${file_to_search}$"
        if [ $? -eq 0 ]; then
            echo $package
            break
        fi
    done
}
